@using com.paralib
@using com.paralib.reference.mvc.Models
@model Hello

@{ 
    HttpContext.Current.Session["foo"] = 0;
}

CurrentConfigPath=@(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile) <br />
DotNetConfigPath=@(com.paralib.Configuration.ConfigurationManager.DotNetConfigPath) <br />
ParalibConfigPath=@(com.paralib.Configuration.ConfigurationManager.ParalibConfigPath) <br />

<hr />

Paralib = @(com.paralib.Configuration.ConfigurationManager.ParalibSection==null?"no":"yes "+ (com.paralib.Configuration.ConfigurationManager.HasParalibOverride ? "(paralib.config)" : "(web.config)")) <br />
Log4Net = @(com.paralib.Configuration.ConfigurationManager.Log4NetSection == null ? "no" : "yes " + (com.paralib.Configuration.ConfigurationManager.HasLog4NetOverride ? "(paralib.config)" : "(web.config)")) <br />
HasConnectionStringsOverrides=@(com.paralib.Configuration.ConfigurationManager.HasConnectionStringsOverrides) <br />
HasAppSettingsOverrides=@(com.paralib.Configuration.ConfigurationManager.HasAppSettingsOverrides) <br />

<hr />

Log4Net XML : @(com.paralib.Configuration.ConfigurationManager.Log4NetSection.OuterXml)<br />

<hr/>

Logging.Enabled= @(Paralib.Logging.Enabled) <br />
Logging.Level= @(Paralib.Logging.Level.ToString()) <br />
Logs:
<pre>
@{
    foreach (var log in Paralib.Logging.Logs)
    {
        @("\t"+log.Name + $"({log.Enabled})" + " [" + log.LogType + "][" + log.LoggerType +"]\n" )

    }
}
</pre>

<hr />
Default Database  = @(Paralib.Dal.Database.Name +$"[{Paralib.Dal.Database.GetConnectionString(false)}]") <br />
Paralib.Dal.Database.Default= @(Paralib.Dal.Databases.Default) <br />
Paralib.Dal.Database.Sync= @(Paralib.Dal.Databases.Sync) <br />

Paralib.Dal.Database.Databases: <br/>

<pre>
@{
    foreach (var db in Paralib.Dal.Databases)
    {
        @($"\t{db.Name} [{db.ConnectionType}] [{db.GetConnectionString(false)}]\n") 
    }
}
</pre>
<hr />
AppSettings:
<pre>
@{
    System.Collections.Specialized.NameValueCollection appSettings = System.Web.Configuration.WebConfigurationManager.AppSettings;
    foreach (var k in appSettings.AllKeys)
    {
        @($"\t{k}={appSettings[k]}\n") 
    }
}
</pre>

<hr />
Connection Strings:
<pre>
@{
    foreach (System.Configuration.ConnectionStringSettings cs in System.Web.Configuration.WebConfigurationManager.ConnectionStrings)
    {
        @($"\t{cs.Name}={cs.ConnectionString} [{cs.ProviderName}]\n") 
    }
}
</pre>

<hr />

    <div style="border-style: solid; border-width: 1px;">
        @Model.Message
    </div>

<hr />

@foreach (var m in HttpContext.Current.ApplicationInstance.Modules.AllKeys)
{
    @(m + " - " + HttpContext.Current.ApplicationInstance.Modules[m].GetType().FullName )
    <br/>
}

<hr />


System.Security.Principal.WindowsIdentity.GetCurrent().Name = @System.Security.Principal.WindowsIdentity.GetCurrent().Name <br />
Request.LogonUserIdentity.Name = @Request.LogonUserIdentity.Name [ @Request.LogonUserIdentity.AuthenticationType ] <br />
Request.IsAuthenticated = @Request.IsAuthenticated <br />
System.Threading.Thread.CurrentPrincipal.Identity.Name = @System.Threading.Thread.CurrentPrincipal.Identity.Name [@System.Threading.Thread.CurrentPrincipal.GetType().Name] <br />
Context.User.Identity.Name = @Context.User.Identity.Name [@Context.User.GetType().Name] <br />


<hr />

@{

    string foo = "hi";


    //string x = null;
    //x.ToString();

}

@($"this is foo: {foo}")



<hr />

@foreach (var a in AppDomain.CurrentDomain.GetAssemblies())
{
    @(a.FullName + " - " + "[" +a.GlobalAssemblyCache +"]")
    <br />
}


<hr />

@foreach (var m in HttpContext.Current.ApplicationInstance.Modules.AllKeys)
{
    @(m + " - " + HttpContext.Current.ApplicationInstance.Modules[m].GetType().FullName )
    <br />
}


